export const pluginDevTranslations = {
  en: {
    "plugin-dev.title": "Plugin Development Guide",
    "plugin-dev.subtitle": "Learn how to create custom plugins for DashOPS using our hexagonal architecture",
    "plugin-dev.intro": "DashOPS plugins follow a hexagonal architecture pattern with dependency injection, enabling clean, testable, and maintainable code.",

    "plugin-dev.architecture.title": "Plugin Architecture",
    "plugin-dev.architecture.desc": "Understanding the hexagonal architecture pattern",
    "plugin-dev.architecture.structure": "Standard Plugin Structure",
    "plugin-dev.architecture.principles": "Core Principles",
    "plugin-dev.architecture.principle-1": "Separation of concerns",
    "plugin-dev.architecture.principle-2": "Dependency injection",
    "plugin-dev.architecture.principle-3": "Interface-based contracts",
    "plugin-dev.architecture.benefits": "Benefits",
    "plugin-dev.architecture.benefit-1": "Testable business logic",
    "plugin-dev.architecture.benefit-2": "Easy to mock dependencies",
    "plugin-dev.architecture.benefit-3": "Flexible integrations",

    "plugin-dev.creating.title": "Creating a Plugin",
    "plugin-dev.creating.desc": "Step-by-step guide to create your first plugin",
    "plugin-dev.creating.module-tab": "Module Setup",
    "plugin-dev.creating.handler-tab": "HTTP Handlers",
    "plugin-dev.creating.logic-tab": "Business Logic",
    "plugin-dev.creating.registration-tab": "Registration",
    "plugin-dev.creating.module-title": "Module Factory Pattern",
    "plugin-dev.creating.module-desc": "The module.go file is the entry point for your plugin",
    "plugin-dev.creating.handler-title": "HTTP Handler Layer",
    "plugin-dev.creating.handler-desc": "Handlers process HTTP requests and responses",
    "plugin-dev.creating.logic-title": "Pure Business Logic",
    "plugin-dev.creating.logic-desc": "Logic layer contains pure functions with no external dependencies",
    "plugin-dev.creating.registration-title": "Plugin Registration",
    "plugin-dev.creating.registration-desc": "Register your plugin in the main application",

    "plugin-dev.testing.title": "Testing Your Plugin",
    "plugin-dev.testing.desc": "Best practices for testing plugin components",
    "plugin-dev.testing.unit-tests": "Unit Tests",
    "plugin-dev.testing.integration-tests": "Integration Tests",
    "plugin-dev.testing.coverage-note": "Logic layer must have 100% test coverage. Controllers and handlers should have integration tests.",

    "plugin-dev.configuration.title": "Plugin Configuration",
    "plugin-dev.configuration.desc": "Configure your plugin via YAML and environment variables",
    "plugin-dev.configuration.yaml-title": "YAML Configuration",
    "plugin-dev.configuration.env-title": "Environment Variables",

    "plugin-dev.best-practices.title": "Best Practices",
    "plugin-dev.best-practices.desc": "Follow these guidelines for high-quality plugins",
    "plugin-dev.best-practices.practice-1-title": "Follow the architecture",
    "plugin-dev.best-practices.practice-1-desc": "Maintain clear separation between layers",
    "plugin-dev.best-practices.practice-2-title": "Write comprehensive tests",
    "plugin-dev.best-practices.practice-2-desc": "Aim for 100% coverage in logic layer",
    "plugin-dev.best-practices.practice-3-title": "Use dependency injection",
    "plugin-dev.best-practices.practice-3-desc": "Never import concrete implementations directly",
    "plugin-dev.best-practices.practice-4-title": "Handle errors properly",
    "plugin-dev.best-practices.practice-4-desc": "Always return meaningful error messages",
    "plugin-dev.best-practices.practice-5-title": "Document your code",
    "plugin-dev.best-practices.practice-5-desc": "Include examples and usage instructions",
  },
  pt: {
    "plugin-dev.title": "Guia de Desenvolvimento de Plugins",
    "plugin-dev.subtitle": "Aprenda a criar plugins personalizados para o DashOPS usando nossa arquitetura hexagonal",
    "plugin-dev.intro": "Os plugins do DashOPS seguem o padrão de arquitetura hexagonal com injeção de dependência, permitindo código limpo, testável e sustentável.",

    "plugin-dev.architecture.title": "Arquitetura de Plugins",
    "plugin-dev.architecture.desc": "Entendendo o padrão de arquitetura hexagonal",
    "plugin-dev.architecture.structure": "Estrutura Padrão de Plugin",
    "plugin-dev.architecture.principles": "Princípios Fundamentais",
    "plugin-dev.architecture.principle-1": "Separação de responsabilidades",
    "plugin-dev.architecture.principle-2": "Injeção de dependência",
    "plugin-dev.architecture.principle-3": "Contratos baseados em interface",
    "plugin-dev.architecture.benefits": "Benefícios",
    "plugin-dev.architecture.benefit-1": "Lógica de negócio testável",
    "plugin-dev.architecture.benefit-2": "Fácil para mockar dependências",
    "plugin-dev.architecture.benefit-3": "Integrações flexíveis",

    "plugin-dev.creating.title": "Criando um Plugin",
    "plugin-dev.creating.desc": "Guia passo a passo para criar seu primeiro plugin",
    "plugin-dev.creating.module-tab": "Configuração do Módulo",
    "plugin-dev.creating.handler-tab": "Handlers HTTP",
    "plugin-dev.creating.logic-tab": "Lógica de Negócio",
    "plugin-dev.creating.registration-tab": "Registro",
    "plugin-dev.creating.module-title": "Padrão Factory do Módulo",
    "plugin-dev.creating.module-desc": "O arquivo module.go é o ponto de entrada do seu plugin",
    "plugin-dev.creating.handler-title": "Camada de Handler HTTP",
    "plugin-dev.creating.handler-desc": "Handlers processam requisições e respostas HTTP",
    "plugin-dev.creating.logic-title": "Lógica de Negócio Pura",
    "plugin-dev.creating.logic-desc": "A camada logic contém funções puras sem dependências externas",
    "plugin-dev.creating.registration-title": "Registro do Plugin",
    "plugin-dev.creating.registration-desc": "Registre seu plugin na aplicação principal",

    "plugin-dev.testing.title": "Testando seu Plugin",
    "plugin-dev.testing.desc": "Melhores práticas para testar componentes do plugin",
    "plugin-dev.testing.unit-tests": "Testes Unitários",
    "plugin-dev.testing.integration-tests": "Testes de Integração",
    "plugin-dev.testing.coverage-note": "A camada logic deve ter 100% de cobertura de testes. Controllers e handlers devem ter testes de integração.",

    "plugin-dev.configuration.title": "Configuração do Plugin",
    "plugin-dev.configuration.desc": "Configure seu plugin via YAML e variáveis de ambiente",
    "plugin-dev.configuration.yaml-title": "Configuração YAML",
    "plugin-dev.configuration.env-title": "Variáveis de Ambiente",

    "plugin-dev.best-practices.title": "Melhores Práticas",
    "plugin-dev.best-practices.desc": "Siga estas diretrizes para plugins de alta qualidade",
    "plugin-dev.best-practices.practice-1-title": "Siga a arquitetura",
    "plugin-dev.best-practices.practice-1-desc": "Mantenha clara separação entre camadas",
    "plugin-dev.best-practices.practice-2-title": "Escreva testes abrangentes",
    "plugin-dev.best-practices.practice-2-desc": "Busque 100% de cobertura na camada logic",
    "plugin-dev.best-practices.practice-3-title": "Use injeção de dependência",
    "plugin-dev.best-practices.practice-3-desc": "Nunca importe implementações concretas diretamente",
    "plugin-dev.best-practices.practice-4-title": "Trate erros adequadamente",
    "plugin-dev.best-practices.practice-4-desc": "Sempre retorne mensagens de erro significativas",
    "plugin-dev.best-practices.practice-5-title": "Documente seu código",
    "plugin-dev.best-practices.practice-5-desc": "Inclua exemplos e instruções de uso",
  }
}