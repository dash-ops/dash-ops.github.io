export const backendGuideTranslations = {
  en: {
    "backend.title": "Backend Development Guide",
    "backend.subtitle": "Complete guide for developing and contributing to DashOps backend modules",
    "backend.quick-nav.title": "Quick Navigation",
    "backend.quick-nav.architecture": "Architecture Overview",
    "backend.quick-nav.development": "Development Workflow",
    "backend.quick-nav.testing": "Testing Standards",
    "backend.quick-nav.best-practices": "Best Practices",
    "backend.quick-nav.reference": "Quick Reference",

    "backend.architecture.title": "Architecture Overview",
    "backend.architecture.hexagonal.title": "Hexagonal Architecture",
    "backend.architecture.hexagonal.desc": "DashOps follows a hexagonal (ports and adapters) architecture pattern that provides:",
    "backend.architecture.hexagonal.benefit-1": "Clear separation between business logic and external dependencies",
    "backend.architecture.hexagonal.benefit-2": "Easy testing through dependency injection",
    "backend.architecture.hexagonal.benefit-3": "Flexible integration with different data sources and services",
    "backend.architecture.hexagonal.benefit-4": "Maintainable and scalable codebase",
    "backend.architecture.hexagonal.example": "Architecture Example",

    "backend.architecture.layers.title": "Layer Responsibilities",
    "backend.architecture.layers.handlers": "Handlers: HTTP endpoints and request/response handling",
    "backend.architecture.layers.controllers": "Controllers: Orchestrate business operations",
    "backend.architecture.layers.logic": "Logic: Pure business logic (100% unit tested)",
    "backend.architecture.layers.adapters": "Adapters: External service integrations",
    "backend.architecture.layers.models": "Models: Domain entities and data structures",
    "backend.architecture.layers.ports": "Ports: Interfaces and contracts",
    "backend.architecture.layers.wire": "Wire: Request/response DTOs",
    "backend.architecture.layers.module": "Module: Dependency injection setup",

    "backend.development.title": "Development Workflow",
    "backend.development.desc": "Standard workflow for adding features and making changes",
    "backend.development.step-1": "Choose the appropriate module based on feature domain",
    "backend.development.step-2": "Implement business logic in the logic layer first",
    "backend.development.step-3": "Create or update interfaces in ports layer",
    "backend.development.feature.title": "Adding a New Feature",
    "backend.development.feature.step-1": "Define the domain model in models/",
    "backend.development.feature.step-2": "Implement business logic in logic/",
    "backend.development.feature.step-3": "Create HTTP handlers in handlers/",
    "backend.development.feature.step-4": "Update module dependency injection",
    "backend.development.feature.step-5": "Write comprehensive tests",

    "backend.development.di.title": "Dependency Injection Pattern",
    "backend.development.di.desc": "All modules use constructor injection for dependencies",
    "backend.development.di.step-1": "Define interfaces in ports/",
    "backend.development.di.step-2": "Inject dependencies via constructors",
    "backend.development.di.step-3": "Configure in module.go",
    "backend.development.di.example": "Dependency Injection Example",

    "backend.development.patterns.title": "Common Design Patterns",
    "backend.development.patterns.factory": "Factory Pattern: Module creation and configuration",
    "backend.development.patterns.adapter": "Adapter Pattern: External service integration",
    "backend.development.patterns.repository": "Repository Pattern: Data persistence abstraction",

    "backend.testing.title": "Testing Standards",
    "backend.testing.standards.title": "Testing Requirements",
    "backend.testing.standards.logic": "Logic layer: 100% unit test coverage required",
    "backend.testing.standards.controllers": "Controllers: Integration tests with mocked dependencies",
    "backend.testing.standards.handlers": "Handlers: HTTP integration tests",
    "backend.testing.standards.adapters": "Adapters: Integration tests with external services",
    "backend.testing.standards.isolation": "All tests must be isolated and deterministic",
    "backend.testing.standards.mocks": "Use dependency injection for easy mocking",

    "backend.testing.coverage.title": "Coverage Requirements",
    "backend.testing.unit.title": "Unit Test Example",
    "backend.testing.integration.title": "Integration Test Example",
    "backend.testing.commands.title": "Test Commands",
    "backend.testing.mocks.title": "Mock Creation Guidelines",
    "backend.testing.mocks.desc": "Create mocks for external dependencies to ensure test isolation",

    "backend.best-practices.title": "Best Practices",
    "backend.best-practices.rule-1": "Keep business logic in the logic layer",
    "backend.best-practices.rule-2": "Use interfaces for all external dependencies",
    "backend.best-practices.rule-3": "Write tests before implementing features (TDD)",
    "backend.best-practices.rule-4": "Follow Go naming conventions",
    "backend.best-practices.rule-5": "Handle errors explicitly and meaningfully",
    "backend.best-practices.rule-6": "Use context.Context for cancellation",
    "backend.best-practices.rule-7": "Document public interfaces with examples",
    "backend.best-practices.rule-8": "Keep functions small and focused",
    "backend.best-practices.rule-9": "Use meaningful variable and function names",
    "backend.best-practices.rule-10": "Avoid global state and shared mutable data",

    "backend.reference.title": "Quick Reference",
    "backend.reference.commands": "Development Commands",
    "backend.reference.structure": "Module Structure",
    "backend.reference.testing": "Testing Commands",
  },
  pt: {
    "backend.title": "Guia de Desenvolvimento Backend",
    "backend.subtitle": "Guia completo para desenvolver e contribuir com os módulos backend do DashOps",
    "backend.quick-nav.title": "Navegação Rápida",
    "backend.quick-nav.architecture": "Visão Geral da Arquitetura",
    "backend.quick-nav.development": "Fluxo de Desenvolvimento",
    "backend.quick-nav.testing": "Padrões de Testes",
    "backend.quick-nav.best-practices": "Melhores Práticas",
    "backend.quick-nav.reference": "Referência Rápida",

    "backend.architecture.title": "Visão Geral da Arquitetura",
    "backend.architecture.hexagonal.title": "Arquitetura Hexagonal",
    "backend.architecture.hexagonal.desc": "O DashOps segue o padrão de arquitetura hexagonal (portas e adaptadores) que fornece:",
    "backend.architecture.hexagonal.benefit-1": "Clara separação entre lógica de negócio e dependências externas",
    "backend.architecture.hexagonal.benefit-2": "Teste fácil através da injeção de dependência",
    "backend.architecture.hexagonal.benefit-3": "Integração flexível com diferentes fontes de dados e serviços",
    "backend.architecture.hexagonal.benefit-4": "Base de código sustentável e escalável",
    "backend.architecture.hexagonal.example": "Exemplo de Arquitetura",

    "backend.architecture.layers.title": "Responsabilidades das Camadas",
    "backend.architecture.layers.handlers": "Handlers: Endpoints HTTP e manipulação de request/response",
    "backend.architecture.layers.controllers": "Controllers: Orquestram operações de negócio",
    "backend.architecture.layers.logic": "Logic: Lógica de negócio pura (100% testada unitariamente)",
    "backend.architecture.layers.adapters": "Adapters: Integrações de serviços externos",
    "backend.architecture.layers.models": "Models: Entidades de domínio e estruturas de dados",
    "backend.architecture.layers.ports": "Ports: Interfaces e contratos",
    "backend.architecture.layers.wire": "Wire: DTOs de request/response",
    "backend.architecture.layers.module": "Module: Configuração de injeção de dependência",

    "backend.development.title": "Fluxo de Desenvolvimento",
    "backend.development.desc": "Fluxo padrão para adicionar recursos e fazer alterações",
    "backend.development.step-1": "Escolha o módulo apropriado baseado no domínio do recurso",
    "backend.development.step-2": "Implemente a lógica de negócio na camada logic primeiro",
    "backend.development.step-3": "Crie ou atualize interfaces na camada ports",
    "backend.development.feature.title": "Adicionando um Novo Recurso",
    "backend.development.feature.step-1": "Defina o modelo de domínio em models/",
    "backend.development.feature.step-2": "Implemente a lógica de negócio em logic/",
    "backend.development.feature.step-3": "Crie handlers HTTP em handlers/",
    "backend.development.feature.step-4": "Atualize a injeção de dependência do módulo",
    "backend.development.feature.step-5": "Escreva testes abrangentes",

    "backend.development.di.title": "Padrão de Injeção de Dependência",
    "backend.development.di.desc": "Todos os módulos usam injeção de construtor para dependências",
    "backend.development.di.step-1": "Defina interfaces em ports/",
    "backend.development.di.step-2": "Injete dependências via construtores",
    "backend.development.di.step-3": "Configure em module.go",
    "backend.development.di.example": "Exemplo de Injeção de Dependência",

    "backend.development.patterns.title": "Padrões de Design Comuns",
    "backend.development.patterns.factory": "Padrão Factory: Criação e configuração de módulos",
    "backend.development.patterns.adapter": "Padrão Adapter: Integração de serviços externos",
    "backend.development.patterns.repository": "Padrão Repository: Abstração de persistência de dados",

    "backend.testing.title": "Padrões de Testes",
    "backend.testing.standards.title": "Requisitos de Testes",
    "backend.testing.standards.logic": "Camada logic: 100% de cobertura de testes unitários necessária",
    "backend.testing.standards.controllers": "Controllers: Testes de integração com dependências mockadas",
    "backend.testing.standards.handlers": "Handlers: Testes de integração HTTP",
    "backend.testing.standards.adapters": "Adapters: Testes de integração com serviços externos",
    "backend.testing.standards.isolation": "Todos os testes devem ser isolados e determinísticos",
    "backend.testing.standards.mocks": "Use injeção de dependência para facilitar mocking",

    "backend.testing.coverage.title": "Requisitos de Cobertura",
    "backend.testing.unit.title": "Exemplo de Teste Unitário",
    "backend.testing.integration.title": "Exemplo de Teste de Integração",
    "backend.testing.commands.title": "Comandos de Teste",
    "backend.testing.mocks.title": "Diretrizes de Criação de Mocks",
    "backend.testing.mocks.desc": "Crie mocks para dependências externas para garantir isolamento de testes",

    "backend.best-practices.title": "Melhores Práticas",
    "backend.best-practices.rule-1": "Mantenha a lógica de negócio na camada logic",
    "backend.best-practices.rule-2": "Use interfaces para todas as dependências externas",
    "backend.best-practices.rule-3": "Escreva testes antes de implementar recursos (TDD)",
    "backend.best-practices.rule-4": "Siga as convenções de nomenclatura do Go",
    "backend.best-practices.rule-5": "Trate erros explícita e significativamente",
    "backend.best-practices.rule-6": "Use context.Context para cancelamento",
    "backend.best-practices.rule-7": "Documente interfaces públicas com exemplos",
    "backend.best-practices.rule-8": "Mantenha funções pequenas e focadas",
    "backend.best-practices.rule-9": "Use nomes de variáveis e funções significativos",
    "backend.best-practices.rule-10": "Evite estado global e dados mutáveis compartilhados",

    "backend.reference.title": "Referência Rápida",
    "backend.reference.commands": "Comandos de Desenvolvimento",
    "backend.reference.structure": "Estrutura do Módulo",
    "backend.reference.testing": "Comandos de Teste",
  }
}